
den.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002098  08002098  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002098  08002098  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002098  08002098  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002098  08002098  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002098  08002098  00012098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800209c  0800209c  0001209c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080020a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0000033c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000350  20000350  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007b20  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001420  00000000  00000000  00027b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000670  00000000  00000000  00028f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005d8  00000000  00000000  000295f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000021b9  00000000  00000000  00029bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000072ac  00000000  00000000  0002bd89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7b5c  00000000  00000000  00033035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fab91  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000019d8  00000000  00000000  000fabe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002080 	.word	0x08002080

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08002080 	.word	0x08002080

080001c8 <ascii_finder>:
int y,z=0; //letter counters for blinking
int colour1,colour2; //the led colours according to the mod of the name&surname
int sum,summ=0; //ascii sums of name&surname

void ascii_finder(char a[99],char b[99])
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
    while(a[z]!='\0'){
 80001d2:	e010      	b.n	80001f6 <ascii_finder+0x2e>
        sum+=a[z];
 80001d4:	4b27      	ldr	r3, [pc, #156]	; (8000274 <ascii_finder+0xac>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	461a      	mov	r2, r3
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4413      	add	r3, r2
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b25      	ldr	r3, [pc, #148]	; (8000278 <ascii_finder+0xb0>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a23      	ldr	r2, [pc, #140]	; (8000278 <ascii_finder+0xb0>)
 80001ea:	6013      	str	r3, [r2, #0]
        z++;
 80001ec:	4b21      	ldr	r3, [pc, #132]	; (8000274 <ascii_finder+0xac>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	3301      	adds	r3, #1
 80001f2:	4a20      	ldr	r2, [pc, #128]	; (8000274 <ascii_finder+0xac>)
 80001f4:	6013      	str	r3, [r2, #0]
    while(a[z]!='\0'){
 80001f6:	4b1f      	ldr	r3, [pc, #124]	; (8000274 <ascii_finder+0xac>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	461a      	mov	r2, r3
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4413      	add	r3, r2
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d1e6      	bne.n	80001d4 <ascii_finder+0xc>
    }
    colour1=sum%4;
 8000206:	4b1c      	ldr	r3, [pc, #112]	; (8000278 <ascii_finder+0xb0>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	425a      	negs	r2, r3
 800020c:	f003 0303 	and.w	r3, r3, #3
 8000210:	f002 0203 	and.w	r2, r2, #3
 8000214:	bf58      	it	pl
 8000216:	4253      	negpl	r3, r2
 8000218:	4a18      	ldr	r2, [pc, #96]	; (800027c <ascii_finder+0xb4>)
 800021a:	6013      	str	r3, [r2, #0]
    while(b[y]!='\0'){
 800021c:	e010      	b.n	8000240 <ascii_finder+0x78>
        summ+=b[y];
 800021e:	4b18      	ldr	r3, [pc, #96]	; (8000280 <ascii_finder+0xb8>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	461a      	mov	r2, r3
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	4413      	add	r3, r2
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	461a      	mov	r2, r3
 800022c:	4b15      	ldr	r3, [pc, #84]	; (8000284 <ascii_finder+0xbc>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	4a14      	ldr	r2, [pc, #80]	; (8000284 <ascii_finder+0xbc>)
 8000234:	6013      	str	r3, [r2, #0]
        y++;
 8000236:	4b12      	ldr	r3, [pc, #72]	; (8000280 <ascii_finder+0xb8>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	3301      	adds	r3, #1
 800023c:	4a10      	ldr	r2, [pc, #64]	; (8000280 <ascii_finder+0xb8>)
 800023e:	6013      	str	r3, [r2, #0]
    while(b[y]!='\0'){
 8000240:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <ascii_finder+0xb8>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	461a      	mov	r2, r3
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	4413      	add	r3, r2
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d1e6      	bne.n	800021e <ascii_finder+0x56>
    }
    colour2=summ%4;
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <ascii_finder+0xbc>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	425a      	negs	r2, r3
 8000256:	f003 0303 	and.w	r3, r3, #3
 800025a:	f002 0203 	and.w	r2, r2, #3
 800025e:	bf58      	it	pl
 8000260:	4253      	negpl	r3, r2
 8000262:	4a09      	ldr	r2, [pc, #36]	; (8000288 <ascii_finder+0xc0>)
 8000264:	6013      	str	r3, [r2, #0]
}
 8000266:	bf00      	nop
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000034 	.word	0x20000034
 8000278:	20000040 	.word	0x20000040
 800027c:	20000038 	.word	0x20000038
 8000280:	20000030 	.word	0x20000030
 8000284:	20000044 	.word	0x20000044
 8000288:	2000003c 	.word	0x2000003c

0800028c <delay>:
void delay(){
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
	int delay0 = 0xdcdc9;
 8000292:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <delay+0x24>)
 8000294:	607b      	str	r3, [r7, #4]
	while (delay0--){
 8000296:	bf00      	nop
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	1e5a      	subs	r2, r3, #1
 800029c:	607a      	str	r2, [r7, #4]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d1fa      	bne.n	8000298 <delay+0xc>
		}
}
 80002a2:	bf00      	nop
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	000dcdc9 	.word	0x000dcdc9

080002b4 <init_led>:
void init_led () {
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
	 	//RCCAHB1ENR = 0x8;
	RCCAHB1ENR = 1<<3;
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <init_led+0x14>)
 80002ba:	2208      	movs	r2, #8
 80002bc:	601a      	str	r2, [r3, #0]
}
 80002be:	bf00      	nop
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	40023830 	.word	0x40023830

080002cc <turn_name_on>:
void turn_name_on(){
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
	    if(colour1==0){
 80002d0:	4b23      	ldr	r3, [pc, #140]	; (8000360 <turn_name_on+0x94>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d10c      	bne.n	80002f2 <turn_name_on+0x26>
	    gpiodmodregister |= 1<<28;
 80002d8:	4b22      	ldr	r3, [pc, #136]	; (8000364 <turn_name_on+0x98>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a21      	ldr	r2, [pc, #132]	; (8000364 <turn_name_on+0x98>)
 80002de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002e2:	6013      	str	r3, [r2, #0]
	    gpioddataregister |= 1<<14;
 80002e4:	4b20      	ldr	r3, [pc, #128]	; (8000368 <turn_name_on+0x9c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a1f      	ldr	r2, [pc, #124]	; (8000368 <turn_name_on+0x9c>)
 80002ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002ee:	6013      	str	r3, [r2, #0]
		}
		else if(colour1==3){
	    gpiodmodregister |= 1<<24;
	    gpioddataregister |= 1<<12;
		}
}
 80002f0:	e031      	b.n	8000356 <turn_name_on+0x8a>
	    else if(colour1==1){
 80002f2:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <turn_name_on+0x94>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d10c      	bne.n	8000314 <turn_name_on+0x48>
	    gpiodmodregister |= 1<<30;
 80002fa:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <turn_name_on+0x98>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a19      	ldr	r2, [pc, #100]	; (8000364 <turn_name_on+0x98>)
 8000300:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000304:	6013      	str	r3, [r2, #0]
	    gpioddataregister |= 1<<15;
 8000306:	4b18      	ldr	r3, [pc, #96]	; (8000368 <turn_name_on+0x9c>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a17      	ldr	r2, [pc, #92]	; (8000368 <turn_name_on+0x9c>)
 800030c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000310:	6013      	str	r3, [r2, #0]
}
 8000312:	e020      	b.n	8000356 <turn_name_on+0x8a>
	    else if(colour1==2){
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <turn_name_on+0x94>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2b02      	cmp	r3, #2
 800031a:	d10c      	bne.n	8000336 <turn_name_on+0x6a>
	    gpiodmodregister |= 1<<26;
 800031c:	4b11      	ldr	r3, [pc, #68]	; (8000364 <turn_name_on+0x98>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a10      	ldr	r2, [pc, #64]	; (8000364 <turn_name_on+0x98>)
 8000322:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000326:	6013      	str	r3, [r2, #0]
	    gpioddataregister |= 1<<13;
 8000328:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <turn_name_on+0x9c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a0e      	ldr	r2, [pc, #56]	; (8000368 <turn_name_on+0x9c>)
 800032e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000332:	6013      	str	r3, [r2, #0]
}
 8000334:	e00f      	b.n	8000356 <turn_name_on+0x8a>
		else if(colour1==3){
 8000336:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <turn_name_on+0x94>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b03      	cmp	r3, #3
 800033c:	d10b      	bne.n	8000356 <turn_name_on+0x8a>
	    gpiodmodregister |= 1<<24;
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <turn_name_on+0x98>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a08      	ldr	r2, [pc, #32]	; (8000364 <turn_name_on+0x98>)
 8000344:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000348:	6013      	str	r3, [r2, #0]
	    gpioddataregister |= 1<<12;
 800034a:	4b07      	ldr	r3, [pc, #28]	; (8000368 <turn_name_on+0x9c>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a06      	ldr	r2, [pc, #24]	; (8000368 <turn_name_on+0x9c>)
 8000350:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000354:	6013      	str	r3, [r2, #0]
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	20000038 	.word	0x20000038
 8000364:	40020c00 	.word	0x40020c00
 8000368:	40020c14 	.word	0x40020c14

0800036c <turn_surname_on>:
void turn_surname_on(){
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
	    if(colour2==0){
 8000370:	4b23      	ldr	r3, [pc, #140]	; (8000400 <turn_surname_on+0x94>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d10c      	bne.n	8000392 <turn_surname_on+0x26>
	    gpiodmodregister |= 1<<28;
 8000378:	4b22      	ldr	r3, [pc, #136]	; (8000404 <turn_surname_on+0x98>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a21      	ldr	r2, [pc, #132]	; (8000404 <turn_surname_on+0x98>)
 800037e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000382:	6013      	str	r3, [r2, #0]
	    gpioddataregister |= 1<<14;
 8000384:	4b20      	ldr	r3, [pc, #128]	; (8000408 <turn_surname_on+0x9c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a1f      	ldr	r2, [pc, #124]	; (8000408 <turn_surname_on+0x9c>)
 800038a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800038e:	6013      	str	r3, [r2, #0]
		}
		else if(colour2==3){
	    gpiodmodregister |= 1<<24;
	    gpioddataregister |= 1<<12;
		}
}
 8000390:	e031      	b.n	80003f6 <turn_surname_on+0x8a>
	    else if(colour2==1){
 8000392:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <turn_surname_on+0x94>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d10c      	bne.n	80003b4 <turn_surname_on+0x48>
	    gpiodmodregister |= 1<<30;
 800039a:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <turn_surname_on+0x98>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a19      	ldr	r2, [pc, #100]	; (8000404 <turn_surname_on+0x98>)
 80003a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80003a4:	6013      	str	r3, [r2, #0]
	    gpioddataregister |= 1<<15;
 80003a6:	4b18      	ldr	r3, [pc, #96]	; (8000408 <turn_surname_on+0x9c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a17      	ldr	r2, [pc, #92]	; (8000408 <turn_surname_on+0x9c>)
 80003ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003b0:	6013      	str	r3, [r2, #0]
}
 80003b2:	e020      	b.n	80003f6 <turn_surname_on+0x8a>
	    else if(colour2==2){
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <turn_surname_on+0x94>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b02      	cmp	r3, #2
 80003ba:	d10c      	bne.n	80003d6 <turn_surname_on+0x6a>
	    gpiodmodregister |= 1<<26;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <turn_surname_on+0x98>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a10      	ldr	r2, [pc, #64]	; (8000404 <turn_surname_on+0x98>)
 80003c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003c6:	6013      	str	r3, [r2, #0]
	    gpioddataregister |= 1<<13;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <turn_surname_on+0x9c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a0e      	ldr	r2, [pc, #56]	; (8000408 <turn_surname_on+0x9c>)
 80003ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003d2:	6013      	str	r3, [r2, #0]
}
 80003d4:	e00f      	b.n	80003f6 <turn_surname_on+0x8a>
		else if(colour2==3){
 80003d6:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <turn_surname_on+0x94>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2b03      	cmp	r3, #3
 80003dc:	d10b      	bne.n	80003f6 <turn_surname_on+0x8a>
	    gpiodmodregister |= 1<<24;
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <turn_surname_on+0x98>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a08      	ldr	r2, [pc, #32]	; (8000404 <turn_surname_on+0x98>)
 80003e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003e8:	6013      	str	r3, [r2, #0]
	    gpioddataregister |= 1<<12;
 80003ea:	4b07      	ldr	r3, [pc, #28]	; (8000408 <turn_surname_on+0x9c>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4a06      	ldr	r2, [pc, #24]	; (8000408 <turn_surname_on+0x9c>)
 80003f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003f4:	6013      	str	r3, [r2, #0]
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	2000003c 	.word	0x2000003c
 8000404:	40020c00 	.word	0x40020c00
 8000408:	40020c14 	.word	0x40020c14

0800040c <turn_name_off>:
void turn_name_off(){
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
		gpioddataregister=0x0000u;
 8000410:	4b03      	ldr	r3, [pc, #12]	; (8000420 <turn_name_off+0x14>)
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr
 8000420:	40020c14 	.word	0x40020c14

08000424 <turn_surname_off>:
void turn_surname_off(){
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
		gpioddataregister=0x0000u;
 8000428:	4b03      	ldr	r3, [pc, #12]	; (8000438 <turn_surname_off+0x14>)
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	40020c14 	.word	0x40020c14

0800043c <main>:

int main(){
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0

	ascii_finder(my_name,my_surname);
 8000442:	4918      	ldr	r1, [pc, #96]	; (80004a4 <main+0x68>)
 8000444:	4818      	ldr	r0, [pc, #96]	; (80004a8 <main+0x6c>)
 8000446:	f7ff febf 	bl	80001c8 <ascii_finder>

	init_led();
 800044a:	f7ff ff33 	bl	80002b4 <init_led>

	int a,b;
	for(a=0;a<z;a++){
 800044e:	2300      	movs	r3, #0
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	e00a      	b.n	800046a <main+0x2e>
		turn_name_on();
 8000454:	f7ff ff3a 	bl	80002cc <turn_name_on>
		delay();
 8000458:	f7ff ff18 	bl	800028c <delay>
		turn_name_off();
 800045c:	f7ff ffd6 	bl	800040c <turn_name_off>
		delay();
 8000460:	f7ff ff14 	bl	800028c <delay>
	for(a=0;a<z;a++){
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	3301      	adds	r3, #1
 8000468:	607b      	str	r3, [r7, #4]
 800046a:	4b10      	ldr	r3, [pc, #64]	; (80004ac <main+0x70>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	429a      	cmp	r2, r3
 8000472:	dbef      	blt.n	8000454 <main+0x18>
	}
	for(b=0;b<y;b++){
 8000474:	2300      	movs	r3, #0
 8000476:	603b      	str	r3, [r7, #0]
 8000478:	e00a      	b.n	8000490 <main+0x54>
		turn_surname_on();
 800047a:	f7ff ff77 	bl	800036c <turn_surname_on>
		delay();
 800047e:	f7ff ff05 	bl	800028c <delay>
		turn_surname_off();
 8000482:	f7ff ffcf 	bl	8000424 <turn_surname_off>
		delay();
 8000486:	f7ff ff01 	bl	800028c <delay>
	for(b=0;b<y;b++){
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	3301      	adds	r3, #1
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <main+0x74>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	683a      	ldr	r2, [r7, #0]
 8000496:	429a      	cmp	r2, r3
 8000498:	dbef      	blt.n	800047a <main+0x3e>
	}

	return 0;
 800049a:	2300      	movs	r3, #0

}
 800049c:	4618      	mov	r0, r3
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000008 	.word	0x20000008
 80004a8:	20000000 	.word	0x20000000
 80004ac:	20000034 	.word	0x20000034
 80004b0:	20000030 	.word	0x20000030

080004b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <NMI_Handler+0x4>

080004ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <HardFault_Handler+0x4>

080004c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <MemManage_Handler+0x4>

080004c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <BusFault_Handler+0x4>

080004cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <UsageFault_Handler+0x4>

080004d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000500:	f000 f848 	bl	8000594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800050c:	4802      	ldr	r0, [pc, #8]	; (8000518 <OTG_FS_IRQHandler+0x10>)
 800050e:	f000 f855 	bl	80005bc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	2000004c 	.word	0x2000004c

0800051c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <SystemInit+0x20>)
 8000522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000526:	4a05      	ldr	r2, [pc, #20]	; (800053c <SystemInit+0x20>)
 8000528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800052c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	e000ed00 	.word	0xe000ed00

08000540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000578 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000544:	480d      	ldr	r0, [pc, #52]	; (800057c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000546:	490e      	ldr	r1, [pc, #56]	; (8000580 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000548:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800054c:	e002      	b.n	8000554 <LoopCopyDataInit>

0800054e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000552:	3304      	adds	r3, #4

08000554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000558:	d3f9      	bcc.n	800054e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055a:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800055c:	4c0b      	ldr	r4, [pc, #44]	; (800058c <LoopFillZerobss+0x26>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000560:	e001      	b.n	8000566 <LoopFillZerobss>

08000562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000564:	3204      	adds	r2, #4

08000566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000568:	d3fb      	bcc.n	8000562 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800056a:	f7ff ffd7 	bl	800051c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800056e:	f001 fd63 	bl	8002038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000572:	f7ff ff63 	bl	800043c <main>
  bx  lr    
 8000576:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000578:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800057c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000580:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000584:	080020a0 	.word	0x080020a0
  ldr r2, =_sbss
 8000588:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800058c:	20000350 	.word	0x20000350

08000590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000590:	e7fe      	b.n	8000590 <ADC_IRQHandler>
	...

08000594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_IncTick+0x20>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_IncTick+0x24>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <HAL_IncTick+0x24>)
 80005a6:	6013      	str	r3, [r2, #0]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000010 	.word	0x20000010
 80005b8:	20000048 	.word	0x20000048

080005bc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fa0f 	bl	80019f6 <USB_GetMode>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b01      	cmp	r3, #1
 80005dc:	f040 80f6 	bne.w	80007cc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 f9f3 	bl	80019d0 <USB_ReadInterrupts>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	f000 80ec 	beq.w	80007ca <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 f9ea 	bl	80019d0 <USB_ReadInterrupts>
 80005fc:	4603      	mov	r3, r0
 80005fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000606:	d104      	bne.n	8000612 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000610:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4618      	mov	r0, r3
 8000618:	f001 f9da 	bl	80019d0 <USB_ReadInterrupts>
 800061c:	4603      	mov	r3, r0
 800061e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000626:	d104      	bne.n	8000632 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000630:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4618      	mov	r0, r3
 8000638:	f001 f9ca 	bl	80019d0 <USB_ReadInterrupts>
 800063c:	4603      	mov	r3, r0
 800063e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000642:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000646:	d104      	bne.n	8000652 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000650:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f9ba 	bl	80019d0 <USB_ReadInterrupts>
 800065c:	4603      	mov	r3, r0
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	2b02      	cmp	r3, #2
 8000664:	d103      	bne.n	800066e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2202      	movs	r2, #2
 800066c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f001 f9ac 	bl	80019d0 <USB_ReadInterrupts>
 8000678:	4603      	mov	r3, r0
 800067a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800067e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000682:	d11c      	bne.n	80006be <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800068c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	2b00      	cmp	r3, #0
 800069c:	d10f      	bne.n	80006be <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800069e:	2110      	movs	r1, #16
 80006a0:	6938      	ldr	r0, [r7, #16]
 80006a2:	f001 f8d9 	bl	8001858 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80006a6:	6938      	ldr	r0, [r7, #16]
 80006a8:	f001 f90a 	bl	80018c0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2101      	movs	r1, #1
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 f9ad 	bl	8001a12 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f001 fc3e 	bl	8001f3a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 f984 	bl	80019d0 <USB_ReadInterrupts>
 80006c8:	4603      	mov	r3, r0
 80006ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80006ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006d2:	d102      	bne.n	80006da <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f001 f829 	bl	800172c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 f976 	bl	80019d0 <USB_ReadInterrupts>
 80006e4:	4603      	mov	r3, r0
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b08      	cmp	r3, #8
 80006ec:	d106      	bne.n	80006fc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f001 fc07 	bl	8001f02 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2208      	movs	r2, #8
 80006fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f001 f965 	bl	80019d0 <USB_ReadInterrupts>
 8000706:	4603      	mov	r3, r0
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	2b10      	cmp	r3, #16
 800070e:	d101      	bne.n	8000714 <HAL_HCD_IRQHandler+0x158>
 8000710:	2301      	movs	r3, #1
 8000712:	e000      	b.n	8000716 <HAL_HCD_IRQHandler+0x15a>
 8000714:	2300      	movs	r3, #0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d012      	beq.n	8000740 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	699a      	ldr	r2, [r3, #24]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f022 0210 	bic.w	r2, r2, #16
 8000728:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f000 ff2c 	bl	8001588 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	699a      	ldr	r2, [r3, #24]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f042 0210 	orr.w	r2, r2, #16
 800073e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f001 f943 	bl	80019d0 <USB_ReadInterrupts>
 800074a:	4603      	mov	r3, r0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000754:	d13a      	bne.n	80007cc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	f001 f993 	bl	8001a86 <USB_HC_ReadInterrupt>
 8000760:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	e025      	b.n	80007b4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	fa22 f303 	lsr.w	r3, r2, r3
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	2b00      	cmp	r3, #0
 800077a:	d018      	beq.n	80007ae <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	015a      	lsls	r2, r3, #5
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	4413      	add	r3, r2
 8000784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800078e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000792:	d106      	bne.n	80007a2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4619      	mov	r1, r3
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f000 f836 	bl	800080c <HCD_HC_IN_IRQHandler>
 80007a0:	e005      	b.n	80007ae <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	4619      	mov	r1, r3
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 fb84 	bl	8000eb6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	3301      	adds	r3, #1
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d3d4      	bcc.n	8000768 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	e000      	b.n	80007cc <HAL_HCD_IRQHandler+0x210>
      return;
 80007ca:	bf00      	nop
    }
  }
}
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d101      	bne.n	80007e8 <HAL_HCD_Stop+0x16>
 80007e4:	2302      	movs	r3, #2
 80007e6:	e00d      	b.n	8000804 <HAL_HCD_Stop+0x32>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2201      	movs	r2, #1
 80007ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 fa53 	bl	8001ca0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8000802:	2300      	movs	r3, #0
}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	015a      	lsls	r2, r3, #5
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	4413      	add	r3, r2
 800082e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	f003 0304 	and.w	r3, r3, #4
 8000838:	2b04      	cmp	r3, #4
 800083a:	d11a      	bne.n	8000872 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	015a      	lsls	r2, r3, #5
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	4413      	add	r3, r2
 8000844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000848:	461a      	mov	r2, r3
 800084a:	2304      	movs	r3, #4
 800084c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	212c      	movs	r1, #44	; 0x2c
 8000854:	fb01 f303 	mul.w	r3, r1, r3
 8000858:	4413      	add	r3, r2
 800085a:	3361      	adds	r3, #97	; 0x61
 800085c:	2206      	movs	r2, #6
 800085e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	b2d2      	uxtb	r2, r2
 8000868:	4611      	mov	r1, r2
 800086a:	4618      	mov	r0, r3
 800086c:	f001 f91c 	bl	8001aa8 <USB_HC_Halt>
 8000870:	e0af      	b.n	80009d2 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	015a      	lsls	r2, r3, #5
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	4413      	add	r3, r2
 800087a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000888:	d11b      	bne.n	80008c2 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	015a      	lsls	r2, r3, #5
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	4413      	add	r3, r2
 8000892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000896:	461a      	mov	r2, r3
 8000898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800089c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	212c      	movs	r1, #44	; 0x2c
 80008a4:	fb01 f303 	mul.w	r3, r1, r3
 80008a8:	4413      	add	r3, r2
 80008aa:	3361      	adds	r3, #97	; 0x61
 80008ac:	2207      	movs	r2, #7
 80008ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	b2d2      	uxtb	r2, r2
 80008b8:	4611      	mov	r1, r2
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 f8f4 	bl	8001aa8 <USB_HC_Halt>
 80008c0:	e087      	b.n	80009d2 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	015a      	lsls	r2, r3, #5
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	4413      	add	r3, r2
 80008ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	f003 0320 	and.w	r3, r3, #32
 80008d4:	2b20      	cmp	r3, #32
 80008d6:	d109      	bne.n	80008ec <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	015a      	lsls	r2, r3, #5
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	4413      	add	r3, r2
 80008e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80008e4:	461a      	mov	r2, r3
 80008e6:	2320      	movs	r3, #32
 80008e8:	6093      	str	r3, [r2, #8]
 80008ea:	e072      	b.n	80009d2 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	015a      	lsls	r2, r3, #5
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	4413      	add	r3, r2
 80008f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	f003 0308 	and.w	r3, r3, #8
 80008fe:	2b08      	cmp	r3, #8
 8000900:	d11a      	bne.n	8000938 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	015a      	lsls	r2, r3, #5
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	4413      	add	r3, r2
 800090a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800090e:	461a      	mov	r2, r3
 8000910:	2308      	movs	r3, #8
 8000912:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	212c      	movs	r1, #44	; 0x2c
 800091a:	fb01 f303 	mul.w	r3, r1, r3
 800091e:	4413      	add	r3, r2
 8000920:	3361      	adds	r3, #97	; 0x61
 8000922:	2205      	movs	r2, #5
 8000924:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	b2d2      	uxtb	r2, r2
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f001 f8b9 	bl	8001aa8 <USB_HC_Halt>
 8000936:	e04c      	b.n	80009d2 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	015a      	lsls	r2, r3, #5
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	4413      	add	r3, r2
 8000940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800094a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800094e:	d11b      	bne.n	8000988 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	015a      	lsls	r2, r3, #5
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	4413      	add	r3, r2
 8000958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800095c:	461a      	mov	r2, r3
 800095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000962:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	212c      	movs	r1, #44	; 0x2c
 800096a:	fb01 f303 	mul.w	r3, r1, r3
 800096e:	4413      	add	r3, r2
 8000970:	3361      	adds	r3, #97	; 0x61
 8000972:	2208      	movs	r2, #8
 8000974:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	4611      	mov	r1, r2
 8000980:	4618      	mov	r0, r3
 8000982:	f001 f891 	bl	8001aa8 <USB_HC_Halt>
 8000986:	e024      	b.n	80009d2 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	015a      	lsls	r2, r3, #5
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	4413      	add	r3, r2
 8000990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099a:	2b80      	cmp	r3, #128	; 0x80
 800099c:	d119      	bne.n	80009d2 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	015a      	lsls	r2, r3, #5
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	4413      	add	r3, r2
 80009a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80009aa:	461a      	mov	r2, r3
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	212c      	movs	r1, #44	; 0x2c
 80009b6:	fb01 f303 	mul.w	r3, r1, r3
 80009ba:	4413      	add	r3, r2
 80009bc:	3361      	adds	r3, #97	; 0x61
 80009be:	2206      	movs	r2, #6
 80009c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	4611      	mov	r1, r2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f001 f86b 	bl	8001aa8 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	015a      	lsls	r2, r3, #5
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	4413      	add	r3, r2
 80009da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009e8:	d112      	bne.n	8000a10 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	b2d2      	uxtb	r2, r2
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 f857 	bl	8001aa8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	015a      	lsls	r2, r3, #5
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	4413      	add	r3, r2
 8000a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000a06:	461a      	mov	r2, r3
 8000a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a0c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8000a0e:	e24e      	b.n	8000eae <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	015a      	lsls	r2, r3, #5
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	4413      	add	r3, r2
 8000a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	f040 80df 	bne.w	8000be6 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	691b      	ldr	r3, [r3, #16]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d019      	beq.n	8000a64 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	212c      	movs	r1, #44	; 0x2c
 8000a36:	fb01 f303 	mul.w	r3, r1, r3
 8000a3a:	4413      	add	r3, r2
 8000a3c:	3348      	adds	r3, #72	; 0x48
 8000a3e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	0159      	lsls	r1, r3, #5
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	440b      	add	r3, r1
 8000a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000a4c:	691b      	ldr	r3, [r3, #16]
 8000a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000a52:	1ad2      	subs	r2, r2, r3
 8000a54:	6879      	ldr	r1, [r7, #4]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	202c      	movs	r0, #44	; 0x2c
 8000a5a:	fb00 f303 	mul.w	r3, r0, r3
 8000a5e:	440b      	add	r3, r1
 8000a60:	3350      	adds	r3, #80	; 0x50
 8000a62:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	212c      	movs	r1, #44	; 0x2c
 8000a6a:	fb01 f303 	mul.w	r3, r1, r3
 8000a6e:	4413      	add	r3, r2
 8000a70:	3361      	adds	r3, #97	; 0x61
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	212c      	movs	r1, #44	; 0x2c
 8000a7c:	fb01 f303 	mul.w	r3, r1, r3
 8000a80:	4413      	add	r3, r2
 8000a82:	335c      	adds	r3, #92	; 0x5c
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	015a      	lsls	r2, r3, #5
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	4413      	add	r3, r2
 8000a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000a94:	461a      	mov	r2, r3
 8000a96:	2301      	movs	r3, #1
 8000a98:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	212c      	movs	r1, #44	; 0x2c
 8000aa0:	fb01 f303 	mul.w	r3, r1, r3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	333f      	adds	r3, #63	; 0x3f
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d009      	beq.n	8000ac2 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	212c      	movs	r1, #44	; 0x2c
 8000ab4:	fb01 f303 	mul.w	r3, r1, r3
 8000ab8:	4413      	add	r3, r2
 8000aba:	333f      	adds	r3, #63	; 0x3f
 8000abc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d111      	bne.n	8000ae6 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 ffeb 	bl	8001aa8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	015a      	lsls	r2, r3, #5
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	4413      	add	r3, r2
 8000ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ade:	461a      	mov	r2, r3
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	6093      	str	r3, [r2, #8]
 8000ae4:	e03a      	b.n	8000b5c <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	212c      	movs	r1, #44	; 0x2c
 8000aec:	fb01 f303 	mul.w	r3, r1, r3
 8000af0:	4413      	add	r3, r2
 8000af2:	333f      	adds	r3, #63	; 0x3f
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d009      	beq.n	8000b0e <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	212c      	movs	r1, #44	; 0x2c
 8000b00:	fb01 f303 	mul.w	r3, r1, r3
 8000b04:	4413      	add	r3, r2
 8000b06:	333f      	adds	r3, #63	; 0x3f
 8000b08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d126      	bne.n	8000b5c <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	015a      	lsls	r2, r3, #5
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	4413      	add	r3, r2
 8000b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	0151      	lsls	r1, r2, #5
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	440a      	add	r2, r1
 8000b24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000b28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b2c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	212c      	movs	r1, #44	; 0x2c
 8000b34:	fb01 f303 	mul.w	r3, r1, r3
 8000b38:	4413      	add	r3, r2
 8000b3a:	3360      	adds	r3, #96	; 0x60
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	b2d9      	uxtb	r1, r3
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	202c      	movs	r0, #44	; 0x2c
 8000b4a:	fb00 f303 	mul.w	r3, r0, r3
 8000b4e:	4413      	add	r3, r2
 8000b50:	3360      	adds	r3, #96	; 0x60
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f001 f9fd 	bl	8001f56 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	691b      	ldr	r3, [r3, #16]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d12b      	bne.n	8000bbc <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	212c      	movs	r1, #44	; 0x2c
 8000b6a:	fb01 f303 	mul.w	r3, r1, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	3348      	adds	r3, #72	; 0x48
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	202c      	movs	r0, #44	; 0x2c
 8000b7a:	fb00 f202 	mul.w	r2, r0, r2
 8000b7e:	440a      	add	r2, r1
 8000b80:	3240      	adds	r2, #64	; 0x40
 8000b82:	8812      	ldrh	r2, [r2, #0]
 8000b84:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f000 818e 	beq.w	8000eae <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	212c      	movs	r1, #44	; 0x2c
 8000b98:	fb01 f303 	mul.w	r3, r1, r3
 8000b9c:	4413      	add	r3, r2
 8000b9e:	3354      	adds	r3, #84	; 0x54
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	f083 0301 	eor.w	r3, r3, #1
 8000ba6:	b2d8      	uxtb	r0, r3
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	212c      	movs	r1, #44	; 0x2c
 8000bae:	fb01 f303 	mul.w	r3, r1, r3
 8000bb2:	4413      	add	r3, r2
 8000bb4:	3354      	adds	r3, #84	; 0x54
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	701a      	strb	r2, [r3, #0]
}
 8000bba:	e178      	b.n	8000eae <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	212c      	movs	r1, #44	; 0x2c
 8000bc2:	fb01 f303 	mul.w	r3, r1, r3
 8000bc6:	4413      	add	r3, r2
 8000bc8:	3354      	adds	r3, #84	; 0x54
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	f083 0301 	eor.w	r3, r3, #1
 8000bd0:	b2d8      	uxtb	r0, r3
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	212c      	movs	r1, #44	; 0x2c
 8000bd8:	fb01 f303 	mul.w	r3, r1, r3
 8000bdc:	4413      	add	r3, r2
 8000bde:	3354      	adds	r3, #84	; 0x54
 8000be0:	4602      	mov	r2, r0
 8000be2:	701a      	strb	r2, [r3, #0]
}
 8000be4:	e163      	b.n	8000eae <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	015a      	lsls	r2, r3, #5
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	4413      	add	r3, r2
 8000bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	f003 0302 	and.w	r3, r3, #2
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	f040 80f6 	bne.w	8000dea <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	212c      	movs	r1, #44	; 0x2c
 8000c04:	fb01 f303 	mul.w	r3, r1, r3
 8000c08:	4413      	add	r3, r2
 8000c0a:	3361      	adds	r3, #97	; 0x61
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d109      	bne.n	8000c26 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	212c      	movs	r1, #44	; 0x2c
 8000c18:	fb01 f303 	mul.w	r3, r1, r3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	3360      	adds	r3, #96	; 0x60
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
 8000c24:	e0c9      	b.n	8000dba <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	212c      	movs	r1, #44	; 0x2c
 8000c2c:	fb01 f303 	mul.w	r3, r1, r3
 8000c30:	4413      	add	r3, r2
 8000c32:	3361      	adds	r3, #97	; 0x61
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b05      	cmp	r3, #5
 8000c38:	d109      	bne.n	8000c4e <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	212c      	movs	r1, #44	; 0x2c
 8000c40:	fb01 f303 	mul.w	r3, r1, r3
 8000c44:	4413      	add	r3, r2
 8000c46:	3360      	adds	r3, #96	; 0x60
 8000c48:	2205      	movs	r2, #5
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	e0b5      	b.n	8000dba <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	212c      	movs	r1, #44	; 0x2c
 8000c54:	fb01 f303 	mul.w	r3, r1, r3
 8000c58:	4413      	add	r3, r2
 8000c5a:	3361      	adds	r3, #97	; 0x61
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d009      	beq.n	8000c76 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	212c      	movs	r1, #44	; 0x2c
 8000c68:	fb01 f303 	mul.w	r3, r1, r3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3361      	adds	r3, #97	; 0x61
 8000c70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8000c72:	2b08      	cmp	r3, #8
 8000c74:	d150      	bne.n	8000d18 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	212c      	movs	r1, #44	; 0x2c
 8000c7c:	fb01 f303 	mul.w	r3, r1, r3
 8000c80:	4413      	add	r3, r2
 8000c82:	335c      	adds	r3, #92	; 0x5c
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	202c      	movs	r0, #44	; 0x2c
 8000c8e:	fb00 f303 	mul.w	r3, r0, r3
 8000c92:	440b      	add	r3, r1
 8000c94:	335c      	adds	r3, #92	; 0x5c
 8000c96:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	212c      	movs	r1, #44	; 0x2c
 8000c9e:	fb01 f303 	mul.w	r3, r1, r3
 8000ca2:	4413      	add	r3, r2
 8000ca4:	335c      	adds	r3, #92	; 0x5c
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d912      	bls.n	8000cd2 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	212c      	movs	r1, #44	; 0x2c
 8000cb2:	fb01 f303 	mul.w	r3, r1, r3
 8000cb6:	4413      	add	r3, r2
 8000cb8:	335c      	adds	r3, #92	; 0x5c
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	212c      	movs	r1, #44	; 0x2c
 8000cc4:	fb01 f303 	mul.w	r3, r1, r3
 8000cc8:	4413      	add	r3, r2
 8000cca:	3360      	adds	r3, #96	; 0x60
 8000ccc:	2204      	movs	r2, #4
 8000cce:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8000cd0:	e073      	b.n	8000dba <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	212c      	movs	r1, #44	; 0x2c
 8000cd8:	fb01 f303 	mul.w	r3, r1, r3
 8000cdc:	4413      	add	r3, r2
 8000cde:	3360      	adds	r3, #96	; 0x60
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	015a      	lsls	r2, r3, #5
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4413      	add	r3, r2
 8000cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000cfa:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d02:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	015a      	lsls	r2, r3, #5
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d10:	461a      	mov	r2, r3
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8000d16:	e050      	b.n	8000dba <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	212c      	movs	r1, #44	; 0x2c
 8000d1e:	fb01 f303 	mul.w	r3, r1, r3
 8000d22:	4413      	add	r3, r2
 8000d24:	3361      	adds	r3, #97	; 0x61
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b03      	cmp	r3, #3
 8000d2a:	d122      	bne.n	8000d72 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	212c      	movs	r1, #44	; 0x2c
 8000d32:	fb01 f303 	mul.w	r3, r1, r3
 8000d36:	4413      	add	r3, r2
 8000d38:	3360      	adds	r3, #96	; 0x60
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	015a      	lsls	r2, r3, #5
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	4413      	add	r3, r2
 8000d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000d54:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	015a      	lsls	r2, r3, #5
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	4413      	add	r3, r2
 8000d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	e023      	b.n	8000dba <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	212c      	movs	r1, #44	; 0x2c
 8000d78:	fb01 f303 	mul.w	r3, r1, r3
 8000d7c:	4413      	add	r3, r2
 8000d7e:	3361      	adds	r3, #97	; 0x61
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b07      	cmp	r3, #7
 8000d84:	d119      	bne.n	8000dba <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	212c      	movs	r1, #44	; 0x2c
 8000d8c:	fb01 f303 	mul.w	r3, r1, r3
 8000d90:	4413      	add	r3, r2
 8000d92:	335c      	adds	r3, #92	; 0x5c
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	202c      	movs	r0, #44	; 0x2c
 8000d9e:	fb00 f303 	mul.w	r3, r0, r3
 8000da2:	440b      	add	r3, r1
 8000da4:	335c      	adds	r3, #92	; 0x5c
 8000da6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	212c      	movs	r1, #44	; 0x2c
 8000dae:	fb01 f303 	mul.w	r3, r1, r3
 8000db2:	4413      	add	r3, r2
 8000db4:	3360      	adds	r3, #96	; 0x60
 8000db6:	2204      	movs	r2, #4
 8000db8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	015a      	lsls	r2, r3, #5
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	2302      	movs	r3, #2
 8000dca:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	b2d9      	uxtb	r1, r3
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	202c      	movs	r0, #44	; 0x2c
 8000dd6:	fb00 f303 	mul.w	r3, r0, r3
 8000dda:	4413      	add	r3, r2
 8000ddc:	3360      	adds	r3, #96	; 0x60
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f001 f8b7 	bl	8001f56 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8000de8:	e061      	b.n	8000eae <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	015a      	lsls	r2, r3, #5
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4413      	add	r3, r2
 8000df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	2b10      	cmp	r3, #16
 8000dfe:	d156      	bne.n	8000eae <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	212c      	movs	r1, #44	; 0x2c
 8000e06:	fb01 f303 	mul.w	r3, r1, r3
 8000e0a:	4413      	add	r3, r2
 8000e0c:	333f      	adds	r3, #63	; 0x3f
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d111      	bne.n	8000e38 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	212c      	movs	r1, #44	; 0x2c
 8000e1a:	fb01 f303 	mul.w	r3, r1, r3
 8000e1e:	4413      	add	r3, r2
 8000e20:	335c      	adds	r3, #92	; 0x5c
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 fe39 	bl	8001aa8 <USB_HC_Halt>
 8000e36:	e031      	b.n	8000e9c <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	212c      	movs	r1, #44	; 0x2c
 8000e3e:	fb01 f303 	mul.w	r3, r1, r3
 8000e42:	4413      	add	r3, r2
 8000e44:	333f      	adds	r3, #63	; 0x3f
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d009      	beq.n	8000e60 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	212c      	movs	r1, #44	; 0x2c
 8000e52:	fb01 f303 	mul.w	r3, r1, r3
 8000e56:	4413      	add	r3, r2
 8000e58:	333f      	adds	r3, #63	; 0x3f
 8000e5a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d11d      	bne.n	8000e9c <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	212c      	movs	r1, #44	; 0x2c
 8000e66:	fb01 f303 	mul.w	r3, r1, r3
 8000e6a:	4413      	add	r3, r2
 8000e6c:	335c      	adds	r3, #92	; 0x5c
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	691b      	ldr	r3, [r3, #16]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d110      	bne.n	8000e9c <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	212c      	movs	r1, #44	; 0x2c
 8000e80:	fb01 f303 	mul.w	r3, r1, r3
 8000e84:	4413      	add	r3, r2
 8000e86:	3361      	adds	r3, #97	; 0x61
 8000e88:	2203      	movs	r2, #3
 8000e8a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	4611      	mov	r1, r2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 fe06 	bl	8001aa8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	015a      	lsls	r2, r3, #5
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	2310      	movs	r3, #16
 8000eac:	6093      	str	r3, [r2, #8]
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b088      	sub	sp, #32
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	015a      	lsls	r2, r3, #5
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	d11a      	bne.n	8000f1c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	015a      	lsls	r2, r3, #5
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	4413      	add	r3, r2
 8000eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	212c      	movs	r1, #44	; 0x2c
 8000efe:	fb01 f303 	mul.w	r3, r1, r3
 8000f02:	4413      	add	r3, r2
 8000f04:	3361      	adds	r3, #97	; 0x61
 8000f06:	2206      	movs	r2, #6
 8000f08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fdc7 	bl	8001aa8 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8000f1a:	e331      	b.n	8001580 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	015a      	lsls	r2, r3, #5
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	4413      	add	r3, r2
 8000f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 0320 	and.w	r3, r3, #32
 8000f2e:	2b20      	cmp	r3, #32
 8000f30:	d12e      	bne.n	8000f90 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	015a      	lsls	r2, r3, #5
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	4413      	add	r3, r2
 8000f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f3e:	461a      	mov	r2, r3
 8000f40:	2320      	movs	r3, #32
 8000f42:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	212c      	movs	r1, #44	; 0x2c
 8000f4a:	fb01 f303 	mul.w	r3, r1, r3
 8000f4e:	4413      	add	r3, r2
 8000f50:	333d      	adds	r3, #61	; 0x3d
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	f040 8313 	bne.w	8001580 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	212c      	movs	r1, #44	; 0x2c
 8000f60:	fb01 f303 	mul.w	r3, r1, r3
 8000f64:	4413      	add	r3, r2
 8000f66:	333d      	adds	r3, #61	; 0x3d
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	212c      	movs	r1, #44	; 0x2c
 8000f72:	fb01 f303 	mul.w	r3, r1, r3
 8000f76:	4413      	add	r3, r2
 8000f78:	3360      	adds	r3, #96	; 0x60
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 fd8d 	bl	8001aa8 <USB_HC_Halt>
}
 8000f8e:	e2f7      	b.n	8001580 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	015a      	lsls	r2, r3, #5
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	4413      	add	r3, r2
 8000f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fa6:	d112      	bne.n	8000fce <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	015a      	lsls	r2, r3, #5
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	4413      	add	r3, r2
 8000fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fba:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 fd6e 	bl	8001aa8 <USB_HC_Halt>
}
 8000fcc:	e2d8      	b.n	8001580 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	015a      	lsls	r2, r3, #5
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d140      	bne.n	8001066 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	212c      	movs	r1, #44	; 0x2c
 8000fea:	fb01 f303 	mul.w	r3, r1, r3
 8000fee:	4413      	add	r3, r2
 8000ff0:	335c      	adds	r3, #92	; 0x5c
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	015a      	lsls	r2, r3, #5
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001008:	2b40      	cmp	r3, #64	; 0x40
 800100a:	d111      	bne.n	8001030 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	212c      	movs	r1, #44	; 0x2c
 8001012:	fb01 f303 	mul.w	r3, r1, r3
 8001016:	4413      	add	r3, r2
 8001018:	333d      	adds	r3, #61	; 0x3d
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	015a      	lsls	r2, r3, #5
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	4413      	add	r3, r2
 8001026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800102a:	461a      	mov	r2, r3
 800102c:	2340      	movs	r3, #64	; 0x40
 800102e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	015a      	lsls	r2, r3, #5
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	4413      	add	r3, r2
 8001038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800103c:	461a      	mov	r2, r3
 800103e:	2301      	movs	r3, #1
 8001040:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	212c      	movs	r1, #44	; 0x2c
 8001048:	fb01 f303 	mul.w	r3, r1, r3
 800104c:	4413      	add	r3, r2
 800104e:	3361      	adds	r3, #97	; 0x61
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fd22 	bl	8001aa8 <USB_HC_Halt>
}
 8001064:	e28c      	b.n	8001580 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	015a      	lsls	r2, r3, #5
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	4413      	add	r3, r2
 800106e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001078:	2b40      	cmp	r3, #64	; 0x40
 800107a:	d12c      	bne.n	80010d6 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	212c      	movs	r1, #44	; 0x2c
 8001082:	fb01 f303 	mul.w	r3, r1, r3
 8001086:	4413      	add	r3, r2
 8001088:	3361      	adds	r3, #97	; 0x61
 800108a:	2204      	movs	r2, #4
 800108c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	212c      	movs	r1, #44	; 0x2c
 8001094:	fb01 f303 	mul.w	r3, r1, r3
 8001098:	4413      	add	r3, r2
 800109a:	333d      	adds	r3, #61	; 0x3d
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	212c      	movs	r1, #44	; 0x2c
 80010a6:	fb01 f303 	mul.w	r3, r1, r3
 80010aa:	4413      	add	r3, r2
 80010ac:	335c      	adds	r3, #92	; 0x5c
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fcf3 	bl	8001aa8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	015a      	lsls	r2, r3, #5
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	4413      	add	r3, r2
 80010ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010ce:	461a      	mov	r2, r3
 80010d0:	2340      	movs	r3, #64	; 0x40
 80010d2:	6093      	str	r3, [r2, #8]
}
 80010d4:	e254      	b.n	8001580 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	015a      	lsls	r2, r3, #5
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	4413      	add	r3, r2
 80010de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d11a      	bne.n	8001122 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	015a      	lsls	r2, r3, #5
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	4413      	add	r3, r2
 80010f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010f8:	461a      	mov	r2, r3
 80010fa:	2308      	movs	r3, #8
 80010fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	212c      	movs	r1, #44	; 0x2c
 8001104:	fb01 f303 	mul.w	r3, r1, r3
 8001108:	4413      	add	r3, r2
 800110a:	3361      	adds	r3, #97	; 0x61
 800110c:	2205      	movs	r2, #5
 800110e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fcc4 	bl	8001aa8 <USB_HC_Halt>
}
 8001120:	e22e      	b.n	8001580 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	015a      	lsls	r2, r3, #5
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	4413      	add	r3, r2
 800112a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	2b10      	cmp	r3, #16
 8001136:	d140      	bne.n	80011ba <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	212c      	movs	r1, #44	; 0x2c
 800113e:	fb01 f303 	mul.w	r3, r1, r3
 8001142:	4413      	add	r3, r2
 8001144:	335c      	adds	r3, #92	; 0x5c
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	212c      	movs	r1, #44	; 0x2c
 8001150:	fb01 f303 	mul.w	r3, r1, r3
 8001154:	4413      	add	r3, r2
 8001156:	3361      	adds	r3, #97	; 0x61
 8001158:	2203      	movs	r2, #3
 800115a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	212c      	movs	r1, #44	; 0x2c
 8001162:	fb01 f303 	mul.w	r3, r1, r3
 8001166:	4413      	add	r3, r2
 8001168:	333d      	adds	r3, #61	; 0x3d
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d112      	bne.n	8001196 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	212c      	movs	r1, #44	; 0x2c
 8001176:	fb01 f303 	mul.w	r3, r1, r3
 800117a:	4413      	add	r3, r2
 800117c:	333c      	adds	r3, #60	; 0x3c
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d108      	bne.n	8001196 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	212c      	movs	r1, #44	; 0x2c
 800118a:	fb01 f303 	mul.w	r3, r1, r3
 800118e:	4413      	add	r3, r2
 8001190:	333d      	adds	r3, #61	; 0x3d
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fc81 	bl	8001aa8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	015a      	lsls	r2, r3, #5
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4413      	add	r3, r2
 80011ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011b2:	461a      	mov	r2, r3
 80011b4:	2310      	movs	r3, #16
 80011b6:	6093      	str	r3, [r2, #8]
}
 80011b8:	e1e2      	b.n	8001580 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	015a      	lsls	r2, r3, #5
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	4413      	add	r3, r2
 80011c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011cc:	2b80      	cmp	r3, #128	; 0x80
 80011ce:	d164      	bne.n	800129a <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d111      	bne.n	80011fc <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	212c      	movs	r1, #44	; 0x2c
 80011de:	fb01 f303 	mul.w	r3, r1, r3
 80011e2:	4413      	add	r3, r2
 80011e4:	3361      	adds	r3, #97	; 0x61
 80011e6:	2206      	movs	r2, #6
 80011e8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fc57 	bl	8001aa8 <USB_HC_Halt>
 80011fa:	e044      	b.n	8001286 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	212c      	movs	r1, #44	; 0x2c
 8001202:	fb01 f303 	mul.w	r3, r1, r3
 8001206:	4413      	add	r3, r2
 8001208:	335c      	adds	r3, #92	; 0x5c
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	202c      	movs	r0, #44	; 0x2c
 8001214:	fb00 f303 	mul.w	r3, r0, r3
 8001218:	440b      	add	r3, r1
 800121a:	335c      	adds	r3, #92	; 0x5c
 800121c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	212c      	movs	r1, #44	; 0x2c
 8001224:	fb01 f303 	mul.w	r3, r1, r3
 8001228:	4413      	add	r3, r2
 800122a:	335c      	adds	r3, #92	; 0x5c
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d920      	bls.n	8001274 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	212c      	movs	r1, #44	; 0x2c
 8001238:	fb01 f303 	mul.w	r3, r1, r3
 800123c:	4413      	add	r3, r2
 800123e:	335c      	adds	r3, #92	; 0x5c
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	212c      	movs	r1, #44	; 0x2c
 800124a:	fb01 f303 	mul.w	r3, r1, r3
 800124e:	4413      	add	r3, r2
 8001250:	3360      	adds	r3, #96	; 0x60
 8001252:	2204      	movs	r2, #4
 8001254:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	b2d9      	uxtb	r1, r3
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	202c      	movs	r0, #44	; 0x2c
 8001260:	fb00 f303 	mul.w	r3, r0, r3
 8001264:	4413      	add	r3, r2
 8001266:	3360      	adds	r3, #96	; 0x60
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 fe72 	bl	8001f56 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001272:	e008      	b.n	8001286 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	212c      	movs	r1, #44	; 0x2c
 800127a:	fb01 f303 	mul.w	r3, r1, r3
 800127e:	4413      	add	r3, r2
 8001280:	3360      	adds	r3, #96	; 0x60
 8001282:	2202      	movs	r2, #2
 8001284:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	015a      	lsls	r2, r3, #5
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	4413      	add	r3, r2
 800128e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001292:	461a      	mov	r2, r3
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	6093      	str	r3, [r2, #8]
}
 8001298:	e172      	b.n	8001580 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	015a      	lsls	r2, r3, #5
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4413      	add	r3, r2
 80012a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b0:	d11b      	bne.n	80012ea <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	212c      	movs	r1, #44	; 0x2c
 80012b8:	fb01 f303 	mul.w	r3, r1, r3
 80012bc:	4413      	add	r3, r2
 80012be:	3361      	adds	r3, #97	; 0x61
 80012c0:	2208      	movs	r2, #8
 80012c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	4611      	mov	r1, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 fbea 	bl	8001aa8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	015a      	lsls	r2, r3, #5
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	4413      	add	r3, r2
 80012dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012e0:	461a      	mov	r2, r3
 80012e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e6:	6093      	str	r3, [r2, #8]
}
 80012e8:	e14a      	b.n	8001580 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	015a      	lsls	r2, r3, #5
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	4413      	add	r3, r2
 80012f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	f040 813f 	bne.w	8001580 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	212c      	movs	r1, #44	; 0x2c
 8001308:	fb01 f303 	mul.w	r3, r1, r3
 800130c:	4413      	add	r3, r2
 800130e:	3361      	adds	r3, #97	; 0x61
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d17d      	bne.n	8001412 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	212c      	movs	r1, #44	; 0x2c
 800131c:	fb01 f303 	mul.w	r3, r1, r3
 8001320:	4413      	add	r3, r2
 8001322:	3360      	adds	r3, #96	; 0x60
 8001324:	2201      	movs	r2, #1
 8001326:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	212c      	movs	r1, #44	; 0x2c
 800132e:	fb01 f303 	mul.w	r3, r1, r3
 8001332:	4413      	add	r3, r2
 8001334:	333f      	adds	r3, #63	; 0x3f
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d00a      	beq.n	8001352 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	212c      	movs	r1, #44	; 0x2c
 8001342:	fb01 f303 	mul.w	r3, r1, r3
 8001346:	4413      	add	r3, r2
 8001348:	333f      	adds	r3, #63	; 0x3f
 800134a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800134c:	2b03      	cmp	r3, #3
 800134e:	f040 8100 	bne.w	8001552 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d113      	bne.n	8001382 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	212c      	movs	r1, #44	; 0x2c
 8001360:	fb01 f303 	mul.w	r3, r1, r3
 8001364:	4413      	add	r3, r2
 8001366:	3355      	adds	r3, #85	; 0x55
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	f083 0301 	eor.w	r3, r3, #1
 800136e:	b2d8      	uxtb	r0, r3
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	212c      	movs	r1, #44	; 0x2c
 8001376:	fb01 f303 	mul.w	r3, r1, r3
 800137a:	4413      	add	r3, r2
 800137c:	3355      	adds	r3, #85	; 0x55
 800137e:	4602      	mov	r2, r0
 8001380:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	2b01      	cmp	r3, #1
 8001388:	f040 80e3 	bne.w	8001552 <HCD_HC_OUT_IRQHandler+0x69c>
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	212c      	movs	r1, #44	; 0x2c
 8001392:	fb01 f303 	mul.w	r3, r1, r3
 8001396:	4413      	add	r3, r2
 8001398:	334c      	adds	r3, #76	; 0x4c
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 80d8 	beq.w	8001552 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	212c      	movs	r1, #44	; 0x2c
 80013a8:	fb01 f303 	mul.w	r3, r1, r3
 80013ac:	4413      	add	r3, r2
 80013ae:	334c      	adds	r3, #76	; 0x4c
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	202c      	movs	r0, #44	; 0x2c
 80013b8:	fb00 f202 	mul.w	r2, r0, r2
 80013bc:	440a      	add	r2, r1
 80013be:	3240      	adds	r2, #64	; 0x40
 80013c0:	8812      	ldrh	r2, [r2, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	3b01      	subs	r3, #1
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	202c      	movs	r0, #44	; 0x2c
 80013cc:	fb00 f202 	mul.w	r2, r0, r2
 80013d0:	440a      	add	r2, r1
 80013d2:	3240      	adds	r2, #64	; 0x40
 80013d4:	8812      	ldrh	r2, [r2, #0]
 80013d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 80b5 	beq.w	8001552 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	212c      	movs	r1, #44	; 0x2c
 80013ee:	fb01 f303 	mul.w	r3, r1, r3
 80013f2:	4413      	add	r3, r2
 80013f4:	3355      	adds	r3, #85	; 0x55
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	f083 0301 	eor.w	r3, r3, #1
 80013fc:	b2d8      	uxtb	r0, r3
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	212c      	movs	r1, #44	; 0x2c
 8001404:	fb01 f303 	mul.w	r3, r1, r3
 8001408:	4413      	add	r3, r2
 800140a:	3355      	adds	r3, #85	; 0x55
 800140c:	4602      	mov	r2, r0
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	e09f      	b.n	8001552 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	212c      	movs	r1, #44	; 0x2c
 8001418:	fb01 f303 	mul.w	r3, r1, r3
 800141c:	4413      	add	r3, r2
 800141e:	3361      	adds	r3, #97	; 0x61
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b03      	cmp	r3, #3
 8001424:	d109      	bne.n	800143a <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	212c      	movs	r1, #44	; 0x2c
 800142c:	fb01 f303 	mul.w	r3, r1, r3
 8001430:	4413      	add	r3, r2
 8001432:	3360      	adds	r3, #96	; 0x60
 8001434:	2202      	movs	r2, #2
 8001436:	701a      	strb	r2, [r3, #0]
 8001438:	e08b      	b.n	8001552 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	212c      	movs	r1, #44	; 0x2c
 8001440:	fb01 f303 	mul.w	r3, r1, r3
 8001444:	4413      	add	r3, r2
 8001446:	3361      	adds	r3, #97	; 0x61
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b04      	cmp	r3, #4
 800144c:	d109      	bne.n	8001462 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	212c      	movs	r1, #44	; 0x2c
 8001454:	fb01 f303 	mul.w	r3, r1, r3
 8001458:	4413      	add	r3, r2
 800145a:	3360      	adds	r3, #96	; 0x60
 800145c:	2202      	movs	r2, #2
 800145e:	701a      	strb	r2, [r3, #0]
 8001460:	e077      	b.n	8001552 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	212c      	movs	r1, #44	; 0x2c
 8001468:	fb01 f303 	mul.w	r3, r1, r3
 800146c:	4413      	add	r3, r2
 800146e:	3361      	adds	r3, #97	; 0x61
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d109      	bne.n	800148a <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	212c      	movs	r1, #44	; 0x2c
 800147c:	fb01 f303 	mul.w	r3, r1, r3
 8001480:	4413      	add	r3, r2
 8001482:	3360      	adds	r3, #96	; 0x60
 8001484:	2205      	movs	r2, #5
 8001486:	701a      	strb	r2, [r3, #0]
 8001488:	e063      	b.n	8001552 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	212c      	movs	r1, #44	; 0x2c
 8001490:	fb01 f303 	mul.w	r3, r1, r3
 8001494:	4413      	add	r3, r2
 8001496:	3361      	adds	r3, #97	; 0x61
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b06      	cmp	r3, #6
 800149c:	d009      	beq.n	80014b2 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	212c      	movs	r1, #44	; 0x2c
 80014a4:	fb01 f303 	mul.w	r3, r1, r3
 80014a8:	4413      	add	r3, r2
 80014aa:	3361      	adds	r3, #97	; 0x61
 80014ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d14f      	bne.n	8001552 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	212c      	movs	r1, #44	; 0x2c
 80014b8:	fb01 f303 	mul.w	r3, r1, r3
 80014bc:	4413      	add	r3, r2
 80014be:	335c      	adds	r3, #92	; 0x5c
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	202c      	movs	r0, #44	; 0x2c
 80014ca:	fb00 f303 	mul.w	r3, r0, r3
 80014ce:	440b      	add	r3, r1
 80014d0:	335c      	adds	r3, #92	; 0x5c
 80014d2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	212c      	movs	r1, #44	; 0x2c
 80014da:	fb01 f303 	mul.w	r3, r1, r3
 80014de:	4413      	add	r3, r2
 80014e0:	335c      	adds	r3, #92	; 0x5c
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d912      	bls.n	800150e <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	212c      	movs	r1, #44	; 0x2c
 80014ee:	fb01 f303 	mul.w	r3, r1, r3
 80014f2:	4413      	add	r3, r2
 80014f4:	335c      	adds	r3, #92	; 0x5c
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	212c      	movs	r1, #44	; 0x2c
 8001500:	fb01 f303 	mul.w	r3, r1, r3
 8001504:	4413      	add	r3, r2
 8001506:	3360      	adds	r3, #96	; 0x60
 8001508:	2204      	movs	r2, #4
 800150a:	701a      	strb	r2, [r3, #0]
 800150c:	e021      	b.n	8001552 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	212c      	movs	r1, #44	; 0x2c
 8001514:	fb01 f303 	mul.w	r3, r1, r3
 8001518:	4413      	add	r3, r2
 800151a:	3360      	adds	r3, #96	; 0x60
 800151c:	2202      	movs	r2, #2
 800151e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	015a      	lsls	r2, r3, #5
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	4413      	add	r3, r2
 8001528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001536:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800153e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	015a      	lsls	r2, r3, #5
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	4413      	add	r3, r2
 8001548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800154c:	461a      	mov	r2, r3
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	015a      	lsls	r2, r3, #5
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	4413      	add	r3, r2
 800155a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800155e:	461a      	mov	r2, r3
 8001560:	2302      	movs	r3, #2
 8001562:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	b2d9      	uxtb	r1, r3
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	202c      	movs	r0, #44	; 0x2c
 800156e:	fb00 f303 	mul.w	r3, r0, r3
 8001572:	4413      	add	r3, r2
 8001574:	3360      	adds	r3, #96	; 0x60
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 fceb 	bl	8001f56 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001580:	bf00      	nop
 8001582:	3720      	adds	r7, #32
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f003 030f 	and.w	r3, r3, #15
 80015a8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	0c5b      	lsrs	r3, r3, #17
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	091b      	lsrs	r3, r3, #4
 80015b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015bc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d004      	beq.n	80015ce <HCD_RXQLVL_IRQHandler+0x46>
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	2b05      	cmp	r3, #5
 80015c8:	f000 80a9 	beq.w	800171e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80015cc:	e0aa      	b.n	8001724 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80a6 	beq.w	8001722 <HCD_RXQLVL_IRQHandler+0x19a>
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	212c      	movs	r1, #44	; 0x2c
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	3344      	adds	r3, #68	; 0x44
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 809b 	beq.w	8001722 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	212c      	movs	r1, #44	; 0x2c
 80015f2:	fb01 f303 	mul.w	r3, r1, r3
 80015f6:	4413      	add	r3, r2
 80015f8:	3350      	adds	r3, #80	; 0x50
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	441a      	add	r2, r3
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	202c      	movs	r0, #44	; 0x2c
 8001606:	fb00 f303 	mul.w	r3, r0, r3
 800160a:	440b      	add	r3, r1
 800160c:	334c      	adds	r3, #76	; 0x4c
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d87a      	bhi.n	800170a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	212c      	movs	r1, #44	; 0x2c
 800161e:	fb01 f303 	mul.w	r3, r1, r3
 8001622:	4413      	add	r3, r2
 8001624:	3344      	adds	r3, #68	; 0x44
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	b292      	uxth	r2, r2
 800162c:	4619      	mov	r1, r3
 800162e:	f000 f977 	bl	8001920 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	212c      	movs	r1, #44	; 0x2c
 8001638:	fb01 f303 	mul.w	r3, r1, r3
 800163c:	4413      	add	r3, r2
 800163e:	3344      	adds	r3, #68	; 0x44
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	441a      	add	r2, r3
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	202c      	movs	r0, #44	; 0x2c
 800164c:	fb00 f303 	mul.w	r3, r0, r3
 8001650:	440b      	add	r3, r1
 8001652:	3344      	adds	r3, #68	; 0x44
 8001654:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	212c      	movs	r1, #44	; 0x2c
 800165c:	fb01 f303 	mul.w	r3, r1, r3
 8001660:	4413      	add	r3, r2
 8001662:	3350      	adds	r3, #80	; 0x50
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	441a      	add	r2, r3
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	202c      	movs	r0, #44	; 0x2c
 8001670:	fb00 f303 	mul.w	r3, r0, r3
 8001674:	440b      	add	r3, r1
 8001676:	3350      	adds	r3, #80	; 0x50
 8001678:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	015a      	lsls	r2, r3, #5
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	4413      	add	r3, r2
 8001682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	0cdb      	lsrs	r3, r3, #19
 800168a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800168e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	212c      	movs	r1, #44	; 0x2c
 8001696:	fb01 f303 	mul.w	r3, r1, r3
 800169a:	4413      	add	r3, r2
 800169c:	3340      	adds	r3, #64	; 0x40
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d13c      	bne.n	8001722 <HCD_RXQLVL_IRQHandler+0x19a>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d039      	beq.n	8001722 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	015a      	lsls	r2, r3, #5
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	4413      	add	r3, r2
 80016b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80016c4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016cc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	015a      	lsls	r2, r3, #5
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	4413      	add	r3, r2
 80016d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016da:	461a      	mov	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	212c      	movs	r1, #44	; 0x2c
 80016e6:	fb01 f303 	mul.w	r3, r1, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	3354      	adds	r3, #84	; 0x54
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	f083 0301 	eor.w	r3, r3, #1
 80016f4:	b2d8      	uxtb	r0, r3
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	212c      	movs	r1, #44	; 0x2c
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	3354      	adds	r3, #84	; 0x54
 8001704:	4602      	mov	r2, r0
 8001706:	701a      	strb	r2, [r3, #0]
      break;
 8001708:	e00b      	b.n	8001722 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	212c      	movs	r1, #44	; 0x2c
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	4413      	add	r3, r2
 8001716:	3360      	adds	r3, #96	; 0x60
 8001718:	2204      	movs	r2, #4
 800171a:	701a      	strb	r2, [r3, #0]
      break;
 800171c:	e001      	b.n	8001722 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800171e:	bf00      	nop
 8001720:	e000      	b.n	8001724 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8001722:	bf00      	nop
  }
}
 8001724:	bf00      	nop
 8001726:	3728      	adds	r7, #40	; 0x28
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001758:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b02      	cmp	r3, #2
 8001762:	d10b      	bne.n	800177c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b01      	cmp	r3, #1
 800176c:	d102      	bne.n	8001774 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 fbd5 	bl	8001f1e <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f043 0302 	orr.w	r3, r3, #2
 800177a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b08      	cmp	r3, #8
 8001784:	d132      	bne.n	80017ec <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	f043 0308 	orr.w	r3, r3, #8
 800178c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b04      	cmp	r3, #4
 8001796:	d126      	bne.n	80017e6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d113      	bne.n	80017c8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80017a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017aa:	d106      	bne.n	80017ba <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2102      	movs	r1, #2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f92d 	bl	8001a12 <USB_InitFSLSPClkSel>
 80017b8:	e011      	b.n	80017de <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2101      	movs	r1, #1
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 f926 	bl	8001a12 <USB_InitFSLSPClkSel>
 80017c6:	e00a      	b.n	80017de <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d106      	bne.n	80017de <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017d6:	461a      	mov	r2, r3
 80017d8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80017dc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 fbc7 	bl	8001f72 <HAL_HCD_PortEnabled_Callback>
 80017e4:	e002      	b.n	80017ec <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 fbd1 	bl	8001f8e <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0320 	and.w	r3, r3, #32
 80017f2:	2b20      	cmp	r3, #32
 80017f4:	d103      	bne.n	80017fe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	f043 0320 	orr.w	r3, r3, #32
 80017fc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001804:	461a      	mov	r2, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	6013      	str	r3, [r2, #0]
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f043 0201 	orr.w	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f023 0201 	bic.w	r2, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	3301      	adds	r3, #1
 800186a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4a13      	ldr	r2, [pc, #76]	; (80018bc <USB_FlushTxFifo+0x64>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d901      	bls.n	8001878 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e01b      	b.n	80018b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	daf2      	bge.n	8001866 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	019b      	lsls	r3, r3, #6
 8001888:	f043 0220 	orr.w	r2, r3, #32
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	3301      	adds	r3, #1
 8001894:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4a08      	ldr	r2, [pc, #32]	; (80018bc <USB_FlushTxFifo+0x64>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e006      	b.n	80018b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	f003 0320 	and.w	r3, r3, #32
 80018aa:	2b20      	cmp	r3, #32
 80018ac:	d0f0      	beq.n	8001890 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	00030d40 	.word	0x00030d40

080018c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3301      	adds	r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4a11      	ldr	r2, [pc, #68]	; (800191c <USB_FlushRxFifo+0x5c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e018      	b.n	8001910 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	daf2      	bge.n	80018cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2210      	movs	r2, #16
 80018ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3301      	adds	r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4a08      	ldr	r2, [pc, #32]	; (800191c <USB_FlushRxFifo+0x5c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e006      	b.n	8001910 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	2b10      	cmp	r3, #16
 800190c:	d0f0      	beq.n	80018f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	00030d40 	.word	0x00030d40

08001920 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8001920:	b480      	push	{r7}
 8001922:	b08b      	sub	sp, #44	; 0x2c
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	4613      	mov	r3, r2
 800192c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	b29b      	uxth	r3, r3
 800193c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8001946:	2300      	movs	r3, #0
 8001948:	623b      	str	r3, [r7, #32]
 800194a:	e014      	b.n	8001976 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	601a      	str	r2, [r3, #0]
    pDest++;
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	3301      	adds	r3, #1
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	3301      	adds	r3, #1
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	3301      	adds	r3, #1
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	3301      	adds	r3, #1
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	3301      	adds	r3, #1
 8001974:	623b      	str	r3, [r7, #32]
 8001976:	6a3a      	ldr	r2, [r7, #32]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	429a      	cmp	r2, r3
 800197c:	d3e6      	bcc.n	800194c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800197e:	8bfb      	ldrh	r3, [r7, #30]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01e      	beq.n	80019c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800198e:	461a      	mov	r2, r3
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	701a      	strb	r2, [r3, #0]
      i++;
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	3301      	adds	r3, #1
 80019ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	3301      	adds	r3, #1
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80019b6:	8bfb      	ldrh	r3, [r7, #30]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80019bc:	8bfb      	ldrh	r3, [r7, #30]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1ea      	bne.n	8001998 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	372c      	adds	r7, #44	; 0x2c
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4013      	ands	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80019e8:	68fb      	ldr	r3, [r7, #12]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f003 0301 	and.w	r3, r3, #1
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a30:	f023 0303 	bic.w	r3, r3, #3
 8001a34:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	68f9      	ldr	r1, [r7, #12]
 8001a46:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d107      	bne.n	8001a64 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001a60:	6053      	str	r3, [r2, #4]
 8001a62:	e009      	b.n	8001a78 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d106      	bne.n	8001a78 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a70:	461a      	mov	r2, r3
 8001a72:	f241 7370 	movw	r3, #6000	; 0x1770
 8001a76:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b085      	sub	sp, #20
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	b29b      	uxth	r3, r3
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	015a      	lsls	r2, r3, #5
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	0c9b      	lsrs	r3, r3, #18
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	015a      	lsls	r2, r3, #5
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0fdb      	lsrs	r3, r3, #31
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0320 	and.w	r3, r3, #32
 8001af4:	2b20      	cmp	r3, #32
 8001af6:	d104      	bne.n	8001b02 <USB_HC_Halt+0x5a>
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e0c8      	b.n	8001c94 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <USB_HC_Halt+0x66>
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d163      	bne.n	8001bd6 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	015a      	lsls	r2, r3, #5
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	4413      	add	r3, r2
 8001b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	0151      	lsls	r1, r2, #5
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	440a      	add	r2, r1
 8001b24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b2c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 0320 	and.w	r3, r3, #32
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 80ab 	bne.w	8001c92 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d133      	bne.n	8001bb0 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	015a      	lsls	r2, r3, #5
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	0151      	lsls	r1, r2, #5
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	440a      	add	r2, r1
 8001b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b66:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	015a      	lsls	r2, r3, #5
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	0151      	lsls	r1, r2, #5
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	440a      	add	r2, r1
 8001b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b86:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b94:	d81d      	bhi.n	8001bd2 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	015a      	lsls	r2, r3, #5
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bac:	d0ec      	beq.n	8001b88 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001bae:	e070      	b.n	8001c92 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	015a      	lsls	r2, r3, #5
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	0151      	lsls	r1, r2, #5
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	440a      	add	r2, r1
 8001bc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bce:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001bd0:	e05f      	b.n	8001c92 <USB_HC_Halt+0x1ea>
            break;
 8001bd2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001bd4:	e05d      	b.n	8001c92 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	015a      	lsls	r2, r3, #5
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	4413      	add	r3, r2
 8001bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	0151      	lsls	r1, r2, #5
 8001be8:	69fa      	ldr	r2, [r7, #28]
 8001bea:	440a      	add	r2, r1
 8001bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001bf4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d133      	bne.n	8001c6e <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	015a      	lsls	r2, r3, #5
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	0151      	lsls	r1, r2, #5
 8001c18:	69fa      	ldr	r2, [r7, #28]
 8001c1a:	440a      	add	r2, r1
 8001c1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c24:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	015a      	lsls	r2, r3, #5
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	0151      	lsls	r1, r2, #5
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	440a      	add	r2, r1
 8001c3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c44:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c52:	d81d      	bhi.n	8001c90 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	015a      	lsls	r2, r3, #5
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c6a:	d0ec      	beq.n	8001c46 <USB_HC_Halt+0x19e>
 8001c6c:	e011      	b.n	8001c92 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	015a      	lsls	r2, r3, #5
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	0151      	lsls	r1, r2, #5
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	440a      	add	r2, r1
 8001c84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e000      	b.n	8001c92 <USB_HC_Halt+0x1ea>
          break;
 8001c90:	bf00      	nop
    }
  }

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3724      	adds	r7, #36	; 0x24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff fdbd 	bl	8001834 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001cba:	2110      	movs	r1, #16
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff fdcb 	bl	8001858 <USB_FlushTxFifo>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff fdf7 	bl	80018c0 <USB_FlushRxFifo>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61bb      	str	r3, [r7, #24]
 8001ce0:	e01f      	b.n	8001d22 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cf8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d08:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	015a      	lsls	r2, r3, #5
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	4413      	add	r3, r2
 8001d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d16:	461a      	mov	r2, r3
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	2b0f      	cmp	r3, #15
 8001d26:	d9dc      	bls.n	8001ce2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	e034      	b.n	8001d98 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	015a      	lsls	r2, r3, #5
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	4413      	add	r3, r2
 8001d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d44:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d4c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d54:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	015a      	lsls	r2, r3, #5
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d62:	461a      	mov	r2, r3
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d74:	d80c      	bhi.n	8001d90 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	015a      	lsls	r2, r3, #5
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d8c:	d0ec      	beq.n	8001d68 <USB_StopHost+0xc8>
 8001d8e:	e000      	b.n	8001d92 <USB_StopHost+0xf2>
        break;
 8001d90:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	3301      	adds	r3, #1
 8001d96:	61bb      	str	r3, [r7, #24]
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2b0f      	cmp	r3, #15
 8001d9c:	d9c7      	bls.n	8001d2e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001da4:	461a      	mov	r2, r3
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
 8001daa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f04f 32ff 	mov.w	r2, #4294967295
 8001db2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff fd2c 	bl	8001812 <USB_EnableGlobalInt>

  return ret;
 8001dba:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3720      	adds	r7, #32
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f804 	bl	8001de8 <USBH_HandleSof>
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b0b      	cmp	r3, #11
 8001df8:	d10a      	bne.n	8001e10 <USBH_HandleSof+0x28>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	4798      	blx	r3
  }
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8001e28:	bf00      	nop
}
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8001e44:	bf00      	nop
}
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f883 	bl	8001faa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	791b      	ldrb	r3, [r3, #4]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f80b 	bl	8001ec6 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	795b      	ldrb	r3, [r3, #5]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f805 	bl	8001ec6 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	2b0f      	cmp	r3, #15
 8001ed6:	d80d      	bhi.n	8001ef4 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	33e0      	adds	r3, #224	; 0xe0
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	33e0      	adds	r3, #224	; 0xe0
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff57 	bl	8001dc4 <USBH_LL_IncTimer>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff8f 	bl	8001e50 <USBH_LL_Connect>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff98 	bl	8001e7e <USBH_LL_Disconnect>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	70fb      	strb	r3, [r7, #3]
 8001f62:	4613      	mov	r3, r2
 8001f64:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff49 	bl	8001e18 <USBH_LL_PortEnabled>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff49 	bl	8001e34 <USBH_LL_PortDisabled>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fc06 	bl	80007d2 <HAL_HCD_Stop>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 f807 	bl	8001fe0 <USBH_Get_USB_Status>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d817      	bhi.n	8002024 <USBH_Get_USB_Status+0x44>
 8001ff4:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <USBH_Get_USB_Status+0x1c>)
 8001ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffa:	bf00      	nop
 8001ffc:	0800200d 	.word	0x0800200d
 8002000:	08002013 	.word	0x08002013
 8002004:	08002019 	.word	0x08002019
 8002008:	0800201f 	.word	0x0800201f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]
    break;
 8002010:	e00b      	b.n	800202a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8002012:	2302      	movs	r3, #2
 8002014:	73fb      	strb	r3, [r7, #15]
    break;
 8002016:	e008      	b.n	800202a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
    break;
 800201c:	e005      	b.n	800202a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800201e:	2302      	movs	r3, #2
 8002020:	73fb      	strb	r3, [r7, #15]
    break;
 8002022:	e002      	b.n	800202a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8002024:	2302      	movs	r3, #2
 8002026:	73fb      	strb	r3, [r7, #15]
    break;
 8002028:	bf00      	nop
  }
  return usb_status;
 800202a:	7bfb      	ldrb	r3, [r7, #15]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <__libc_init_array>:
 8002038:	b570      	push	{r4, r5, r6, lr}
 800203a:	4d0d      	ldr	r5, [pc, #52]	; (8002070 <__libc_init_array+0x38>)
 800203c:	4c0d      	ldr	r4, [pc, #52]	; (8002074 <__libc_init_array+0x3c>)
 800203e:	1b64      	subs	r4, r4, r5
 8002040:	10a4      	asrs	r4, r4, #2
 8002042:	2600      	movs	r6, #0
 8002044:	42a6      	cmp	r6, r4
 8002046:	d109      	bne.n	800205c <__libc_init_array+0x24>
 8002048:	4d0b      	ldr	r5, [pc, #44]	; (8002078 <__libc_init_array+0x40>)
 800204a:	4c0c      	ldr	r4, [pc, #48]	; (800207c <__libc_init_array+0x44>)
 800204c:	f000 f818 	bl	8002080 <_init>
 8002050:	1b64      	subs	r4, r4, r5
 8002052:	10a4      	asrs	r4, r4, #2
 8002054:	2600      	movs	r6, #0
 8002056:	42a6      	cmp	r6, r4
 8002058:	d105      	bne.n	8002066 <__libc_init_array+0x2e>
 800205a:	bd70      	pop	{r4, r5, r6, pc}
 800205c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002060:	4798      	blx	r3
 8002062:	3601      	adds	r6, #1
 8002064:	e7ee      	b.n	8002044 <__libc_init_array+0xc>
 8002066:	f855 3b04 	ldr.w	r3, [r5], #4
 800206a:	4798      	blx	r3
 800206c:	3601      	adds	r6, #1
 800206e:	e7f2      	b.n	8002056 <__libc_init_array+0x1e>
 8002070:	08002098 	.word	0x08002098
 8002074:	08002098 	.word	0x08002098
 8002078:	08002098 	.word	0x08002098
 800207c:	0800209c 	.word	0x0800209c

08002080 <_init>:
 8002080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002082:	bf00      	nop
 8002084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002086:	bc08      	pop	{r3}
 8002088:	469e      	mov	lr, r3
 800208a:	4770      	bx	lr

0800208c <_fini>:
 800208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208e:	bf00      	nop
 8002090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002092:	bc08      	pop	{r3}
 8002094:	469e      	mov	lr, r3
 8002096:	4770      	bx	lr
